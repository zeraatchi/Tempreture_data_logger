
AVRASM ver. 2.1.30  C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm Mon Apr 13 22:40:51 2015

C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1058): warning: Register r5 already defined by the .DEF directive
C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1059): warning: Register r4 already defined by the .DEF directive
C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1060): warning: Register r7 already defined by the .DEF directive
C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1061): warning: Register r6 already defined by the .DEF directive
C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1062): warning: Register r9 already defined by the .DEF directive
C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1063): warning: Register r8 already defined by the .DEF directive
C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1064): warning: Register r11 already defined by the .DEF directive
C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1065): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32A
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Command_Reg=R5
                 	.DEF _Status_Reg=R4
                 	.DEF _State=R7
                 	.DEF _Opr_Mode=R6
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF _j=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0104 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 01f7 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _Base_Addrs:
00002a 0100
00002b 0703
C:\Users\HP\Desktop\akhavan\computer side\List\comp.asm(1097): warning: .cseg .db misalignment - padding zero byte
00002c 0000      	.DB  0x0,0x1,0x3,0x7,0x0
                 _tbl10_G100:
00002d 2710
00002e 03e8
00002f 0064
000030 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000031 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000032 1000
000033 0100
000034 0010
000035 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000036 0000      	.DW  0x0000
                 
                 _0x3:
000037 0100
000038 0703      	.DB  0x0,0x1,0x3,0x7
                 _0x66:
000039 0000
00003a 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
00003b 0001      	.DW  0x01
00003c 0002      	.DW  0x02
00003d 006c      	.DW  __REG_BIT_VARS*2
                 
00003e 0004      	.DW  0x04
00003f 0260      	.DW  _Temp_Addrs
000040 006e      	.DW  _0x3*2
                 
000041 0004      	.DW  0x04
000042 0004      	.DW  0x04
000043 0072      	.DW  _0x66*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bff5      	OUT  MCUCR,R31
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004b e1f8      	LDI  R31,0x18
00004c bdf1      	OUT  WDTCR,R31
00004d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e7e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 0245 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <nRF24L01+.h>
                 
                 	.DSEG
                 
                 	.CSEG
                 _Set_Reg:
000074 931a      	ST   -Y,R17
000075 930a      	ST   -Y,R16
                 ;	ins -> Y+2
                 ;	i -> R16,R17
000076 98c4      	CBI  0x18,4
000077 81ea      	LDD  R30,Y+2
000078 93ea      	ST   -Y,R30
000079 940e 02ce 	CALL _spi
00007b 2e4e      	MOV  R4,R30
00007c 81ea      	LDD  R30,Y+2
00007d e0f0      	LDI  R31,0
00007e 7ee0      	ANDI R30,LOW(0xE0)
00007f 70f0      	ANDI R31,HIGH(0xE0)
000080 9730      	SBIW R30,0
000081 f511      	BRNE _0x9
000082 81ea      	LDD  R30,Y+2
000083 71ef      	ANDI R30,LOW(0x1F)
000084 30ea      	CPI  R30,LOW(0xA)
000085 f041      	BREQ _0xB
000086 81ea      	LDD  R30,Y+2
000087 71ef      	ANDI R30,LOW(0x1F)
000088 30eb      	CPI  R30,LOW(0xB)
000089 f021      	BREQ _0xB
00008a 81ea      	LDD  R30,Y+2
00008b 71ef      	ANDI R30,LOW(0x1F)
00008c 31e0      	CPI  R30,LOW(0x10)
00008d f491      	BRNE _0xA
                 _0xB:
                +
00008e e004     +LDI R16 , LOW ( 4 )
00008f e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                 _0xE:
000090 2311      	TST  R17
000091 f06a      	BRMI _0xF
000092 01f8      	MOVW R30,R16
000093 5ae0      	SUBI R30,LOW(-_Temp_Addrs)
000094 4ffd      	SBCI R31,HIGH(-_Temp_Addrs)
000095 93ff      	PUSH R31
000096 93ef      	PUSH R30
000097 940e 02d5 	CALL SUBOPT_0x0
000099 91af      	POP  R26
00009a 91bf      	POP  R27
00009b 93ec      	ST   X,R30
                +
00009c 5001     +SUBI R16 , LOW ( 1 )
00009d 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
00009e cff1      	RJMP _0xE
                 _0xF:
00009f c003      	RJMP _0x10
                 _0xA:
0000a0 940e 02d5 	CALL SUBOPT_0x0
0000a2 2e5e      	MOV  R5,R30
                 _0x10:
0000a3 c058      	RJMP _0x8
                 _0x9:
0000a4 32e0      	CPI  R30,LOW(0x20)
0000a5 e0a0      	LDI  R26,HIGH(0x20)
0000a6 07fa      	CPC  R31,R26
0000a7 f4f9      	BRNE _0x11
0000a8 81ea      	LDD  R30,Y+2
0000a9 71ef      	ANDI R30,LOW(0x1F)
0000aa 30ea      	CPI  R30,LOW(0xA)
0000ab f041      	BREQ _0x13
0000ac 81ea      	LDD  R30,Y+2
0000ad 71ef      	ANDI R30,LOW(0x1F)
0000ae 30eb      	CPI  R30,LOW(0xB)
0000af f021      	BREQ _0x13
0000b0 81ea      	LDD  R30,Y+2
0000b1 71ef      	ANDI R30,LOW(0x1F)
0000b2 31e0      	CPI  R30,LOW(0x10)
0000b3 f479      	BRNE _0x12
                 _0x13:
                +
0000b4 e004     +LDI R16 , LOW ( 4 )
0000b5 e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                 _0x16:
0000b6 2311      	TST  R17
0000b7 f052      	BRMI _0x17
0000b8 01f8      	MOVW R30,R16
0000b9 5aec      	SUBI R30,LOW(-_Base_Addrs*2)
0000ba 4fff      	SBCI R31,HIGH(-_Base_Addrs*2)
0000bb 91e4      	LPM  R30,Z
0000bc 93ea      	ST   -Y,R30
0000bd 940e 02ce 	CALL _spi
                +
0000bf 5001     +SUBI R16 , LOW ( 1 )
0000c0 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000c1 cff4      	RJMP _0x16
                 _0x17:
0000c2 c003      	RJMP _0x18
                 _0x12:
0000c3 925a      	ST   -Y,R5
0000c4 940e 02ce 	CALL _spi
                 _0x18:
0000c6 c035      	RJMP _0x8
                 _0x11:
0000c7 36e0      	CPI  R30,LOW(0x60)
0000c8 e0a0      	LDI  R26,HIGH(0x60)
0000c9 07fa      	CPC  R31,R26
0000ca f4e1      	BRNE _0x19
0000cb 81ea      	LDD  R30,Y+2
0000cc 70e1      	ANDI R30,LOW(0x1)
0000cd 30e1      	CPI  R30,LOW(0x1)
0000ce f4a1      	BRNE _0x1A
0000cf 9100 0265 	LDS  R16,_payload
0000d1 2711      	CLR  R17
                 _0x1B:
0000d2 2e00      	MOV  R0,R16
0000d3 2a01      	OR   R0,R17
0000d4 f069      	BREQ _0x1D
0000d5 01f8      	MOVW R30,R16
0000d6 59eb      	SUBI R30,LOW(-_payload)
0000d7 4ffd      	SBCI R31,HIGH(-_payload)
0000d8 93ff      	PUSH R31
0000d9 93ef      	PUSH R30
0000da 940e 02d5 	CALL SUBOPT_0x0
0000dc 91af      	POP  R26
0000dd 91bf      	POP  R27
0000de 93ec      	ST   X,R30
                +
0000df 5001     +SUBI R16 , LOW ( 1 )
0000e0 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000e1 cff0      	RJMP _0x1B
                 _0x1D:
0000e2 c003      	RJMP _0x1E
                 _0x1A:
0000e3 940e 02d5 	CALL SUBOPT_0x0
0000e5 2e5e      	MOV  R5,R30
                 _0x1E:
0000e6 c015      	RJMP _0x8
                 _0x19:
0000e7 3ae0      	CPI  R30,LOW(0xA0)
0000e8 e0a0      	LDI  R26,HIGH(0xA0)
0000e9 07fa      	CPC  R31,R26
0000ea f489      	BRNE _0x8
0000eb 9100 0265 	LDS  R16,_payload
0000ed 2711      	CLR  R17
                 _0x20:
0000ee 2e00      	MOV  R0,R16
0000ef 2a01      	OR   R0,R17
0000f0 f059      	BREQ _0x22
0000f1 e6a5      	LDI  R26,LOW(_payload)
0000f2 e0b2      	LDI  R27,HIGH(_payload)
0000f3 0fa0      	ADD  R26,R16
0000f4 1fb1      	ADC  R27,R17
0000f5 91ec      	LD   R30,X
0000f6 93ea      	ST   -Y,R30
0000f7 940e 02ce 	CALL _spi
                +
0000f9 5001     +SUBI R16 , LOW ( 1 )
0000fa 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000fb cff2      	RJMP _0x20
                 _0x22:
                 _0x8:
0000fc 9ac4      	SBI  0x18,4
                +
0000fd e381     +LDI R24 , LOW ( 49 )
                +__DELAY_USB_LOOP :
0000fe 958a     +DEC R24
0000ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 49
000100 8119      	LDD  R17,Y+1
000101 8108      	LDD  R16,Y+0
000102 940c 02cc 	JMP  _0x2080002
                 _ext_int2_isr:
000104 940e 02d9 	CALL SUBOPT_0x1
000106 9ab8      	SBI  0x17,0
000107 9bc0      	SBIS 0x18,0
000108 c002      	RJMP _0x27
000109 98c0      	CBI  0x18,0
00010a c001      	RJMP _0x28
                 _0x27:
00010b 9ac0      	SBI  0x18,0
                 _0x28:
00010c 2066      	TST  R6
00010d f4d9      	BRNE _0x29
00010e efef      	LDI  R30,LOW(255)
00010f 93ea      	ST   -Y,R30
000110 df63      	RCALL _Set_Reg
000111 fe45      	SBRS R4,5
000112 c013      	RJMP _0x2A
000113 e0e2      	LDI  R30,LOW(2)
000114 2e7e      	MOV  R7,R30
000115 e1e7      	LDI  R30,LOW(23)
000116 93ea      	ST   -Y,R30
000117 df5c      	RCALL _Set_Reg
000118 fc50      	SBRC R5,0
000119 c00b      	RJMP _0x2B
00011a 940e 02e7 	CALL SUBOPT_0x2
00011c f028      	BRLO _0x2C
00011d 940e 02ee 	CALL SUBOPT_0x3
00011f e0e3      	LDI  R30,LOW(3)
000120 2e7e      	MOV  R7,R30
000121 c003      	RJMP _0x2D
                 _0x2C:
000122 eee2      	LDI  R30,LOW(226)
000123 93ea      	ST   -Y,R30
000124 df4f      	RCALL _Set_Reg
                 _0x2D:
                 _0x2B:
000125 c002      	RJMP _0x2E
                 _0x2A:
000126 e0e4      	LDI  R30,LOW(4)
000127 2e7e      	MOV  R7,R30
                 _0x2E:
000128 c00b      	RJMP _0x2F
                 _0x29:
000129 940e 02e7 	CALL SUBOPT_0x2
00012b f420      	BRSH _0x30
00012c eee2      	LDI  R30,LOW(226)
00012d 93ea      	ST   -Y,R30
00012e df45      	RCALL _Set_Reg
00012f c004      	RJMP _0x31
                 _0x30:
000130 940e 02ee 	CALL SUBOPT_0x3
000132 e0e1      	LDI  R30,LOW(1)
000133 2e7e      	MOV  R7,R30
                 _0x31:
                 _0x2F:
000134 e7ee      	LDI  R30,LOW(126)
000135 2e5e      	MOV  R5,R30
000136 e2e7      	LDI  R30,LOW(39)
000137 93ea      	ST   -Y,R30
000138 df3b      	RCALL _Set_Reg
000139 eee1      	LDI  R30,LOW(225)
00013a 93ea      	ST   -Y,R30
00013b df38      	RCALL _Set_Reg
00013c c0fa      	RJMP _0x65
                 _Send_Data:
00013d 931a      	ST   -Y,R17
00013e 930a      	ST   -Y,R16
                 ;	num -> Y+4
                 ;	*data -> Y+2
                 ;	counter -> R16,R17
                +
00013f e000     +LDI R16 , LOW ( 0 )
000140 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000141 81ec      	LDD  R30,Y+4
000142 93e0 0265 	STS  _payload,R30
                +
000144 e000     +LDI R16 , LOW ( 0 )
000145 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x33:
000146 81ec      	LDD  R30,Y+4
000147 940e 02f4 	CALL SUBOPT_0x4
000149 f47c      	BRGE _0x34
00014a 01f8      	MOVW R30,R16
                +
00014b 59ea     +SUBI R30 , LOW ( - _payload - ( 1 ) )
00014c 4ffd     +SBCI R31 , HIGH ( - _payload - ( 1 ) )
                 	__ADDW1MN _payload,1
00014d 010f      	MOVW R0,R30
00014e 01f8      	MOVW R30,R16
00014f 81aa      	LDD  R26,Y+2
000150 81bb      	LDD  R27,Y+2+1
000151 0fae      	ADD  R26,R30
000152 1fbf      	ADC  R27,R31
000153 91ec      	LD   R30,X
000154 01d0      	MOVW R26,R0
000155 93ec      	ST   X,R30
                +
000156 5f0f     +SUBI R16 , LOW ( - 1 )
000157 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000158 cfed      	RJMP _0x33
                 _0x34:
000159 fe20      	SBRS R2,0
00015a c038      	RJMP _0x35
00015b 94e8      	CLT
00015c f820      	BLD  R2,0
                +
00015d 91a0 0264+LDS R26 , _Temp_Addrs + ( 4 )
                 	__GETB2MN _Temp_Addrs,4
                +
00015f e5e8     +LDI R30 , LOW ( 2 * _Base_Addrs + ( 4 ) )
000160 e0f0     +LDI R31 , HIGH ( 2 * _Base_Addrs + ( 4 ) )
                 	__POINTW1FN _Base_Addrs,4
000161 91e4      	LPM  R30,Z
000162 17ea      	CP   R30,R26
000163 f4e1      	BRNE _0x37
                +
000164 91a0 0263+LDS R26 , _Temp_Addrs + ( 3 )
                 	__GETB2MN _Temp_Addrs,3
                +
000166 e5e7     +LDI R30 , LOW ( 2 * _Base_Addrs + ( 3 ) )
000167 e0f0     +LDI R31 , HIGH ( 2 * _Base_Addrs + ( 3 ) )
                 	__POINTW1FN _Base_Addrs,3
000168 91e4      	LPM  R30,Z
000169 17ea      	CP   R30,R26
00016a f4a9      	BRNE _0x37
                +
00016b 91a0 0262+LDS R26 , _Temp_Addrs + ( 2 )
                 	__GETB2MN _Temp_Addrs,2
                +
00016d e5e6     +LDI R30 , LOW ( 2 * _Base_Addrs + ( 2 ) )
00016e e0f0     +LDI R31 , HIGH ( 2 * _Base_Addrs + ( 2 ) )
                 	__POINTW1FN _Base_Addrs,2
00016f 91e4      	LPM  R30,Z
000170 17ea      	CP   R30,R26
000171 f471      	BRNE _0x37
                +
000172 91a0 0261+LDS R26 , _Temp_Addrs + ( 1 )
                 	__GETB2MN _Temp_Addrs,1
                +
000174 e5e5     +LDI R30 , LOW ( 2 * _Base_Addrs + ( 1 ) )
000175 e0f0     +LDI R31 , HIGH ( 2 * _Base_Addrs + ( 1 ) )
                 	__POINTW1FN _Base_Addrs,1
000176 91e4      	LPM  R30,Z
000177 17ea      	CP   R30,R26
000178 f439      	BRNE _0x37
000179 e5e4      	LDI  R30,LOW(_Base_Addrs*2)
00017a e0f0      	LDI  R31,HIGH(_Base_Addrs*2)
00017b 91e4      	LPM  R30,Z
00017c 91a0 0260 	LDS  R26,_Temp_Addrs
00017e 17ea      	CP   R30,R26
00017f f009      	BREQ _0x38
                 _0x37:
000180 c010      	RJMP _0x36
                 _0x38:
000181 eee1      	LDI  R30,LOW(225)
000182 93ea      	ST   -Y,R30
000183 def0      	RCALL _Set_Reg
000184 eae0      	LDI  R30,LOW(160)
000185 93ea      	ST   -Y,R30
000186 deed      	RCALL _Set_Reg
000187 940e 02f9 	CALL SUBOPT_0x5
000189 9ac3      	SBI  0x18,3
                +
00018a e682     +LDI R24 , LOW ( 98 )
                +__DELAY_USB_LOOP :
00018b 958a     +DEC R24
00018c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 98
00018d 98c3      	CBI  0x18,3
00018e 940e 02f9 	CALL SUBOPT_0x5
000190 c002      	RJMP _0x3D
                 _0x36:
000191 e0e5      	LDI  R30,LOW(5)
000192 2e7e      	MOV  R7,R30
                 _0x3D:
                 _0x35:
000193 2077      	TST  R7
000194 f019      	BREQ _0x3E
000195 9468      	SET
000196 f820      	BLD  R2,0
000197 2477      	CLR  R7
                 _0x3E:
000198 8119      	LDD  R17,Y+1
000199 8108      	LDD  R16,Y+0
00019a 9625      	ADIW R28,5
00019b 9508      	RET
                 _nRF_Config:
                 ;	mode -> Y+0
00019c e0e0      	LDI  R30,LOW(0)
00019d bbe8      	OUT  0x18,R30
00019e ebe0      	LDI  R30,LOW(176)
00019f bbe7      	OUT  0x17,R30
0001a0 9ac4      	SBI  0x18,4
0001a1 98c3      	CBI  0x18,3
0001a2 b7eb      	IN   R30,0x3B
0001a3 62e0      	ORI  R30,0x20
0001a4 bfeb      	OUT  0x3B,R30
0001a5 e0e0      	LDI  R30,LOW(0)
0001a6 bfe5      	OUT  0x35,R30
0001a7 bfe4      	OUT  0x34,R30
0001a8 e2e0      	LDI  R30,LOW(32)
0001a9 bfea      	OUT  0x3A,R30
0001aa e5e0      	LDI  R30,LOW(80)
0001ab b9ed      	OUT  0xD,R30
0001ac e0e0      	LDI  R30,LOW(0)
0001ad b9ee      	OUT  0xE,R30
0001ae 9478      	sei
0001af e6ee      	LDI  R30,LOW(110)
0001b0 e0f0      	LDI  R31,HIGH(110)
0001b1 940e 02ff 	CALL SUBOPT_0x6
0001b3 8068      	LDD  R6,Y+0
0001b4 e0e1      	LDI  R30,LOW(1)
0001b5 2e5e      	MOV  R5,R30
0001b6 e2e1      	LDI  R30,LOW(33)
0001b7 940e 0303 	CALL SUBOPT_0x7
0001b9 e2e2      	LDI  R30,LOW(34)
0001ba 93ea      	ST   -Y,R30
0001bb deb8      	RCALL _Set_Reg
0001bc e0e3      	LDI  R30,LOW(3)
0001bd 2e5e      	MOV  R5,R30
0001be e2e3      	LDI  R30,LOW(35)
0001bf 93ea      	ST   -Y,R30
0001c0 deb3      	RCALL _Set_Reg
0001c1 e2ef      	LDI  R30,LOW(47)
0001c2 2e5e      	MOV  R5,R30
0001c3 e2e4      	LDI  R30,LOW(36)
0001c4 940e 0303 	CALL SUBOPT_0x7
0001c6 e2e5      	LDI  R30,LOW(37)
0001c7 93ea      	ST   -Y,R30
0001c8 deab      	RCALL _Set_Reg
0001c9 e0e6      	LDI  R30,LOW(6)
0001ca 2e5e      	MOV  R5,R30
0001cb e2e6      	LDI  R30,LOW(38)
0001cc 93ea      	ST   -Y,R30
0001cd dea6      	RCALL _Set_Reg
0001ce e2ea      	LDI  R30,LOW(42)
0001cf 93ea      	ST   -Y,R30
0001d0 dea3      	RCALL _Set_Reg
0001d1 e3e0      	LDI  R30,LOW(48)
0001d2 940e 0303 	CALL SUBOPT_0x7
0001d4 e3ec      	LDI  R30,LOW(60)
0001d5 93ea      	ST   -Y,R30
0001d6 de9d      	RCALL _Set_Reg
0001d7 e0e7      	LDI  R30,LOW(7)
0001d8 2e5e      	MOV  R5,R30
0001d9 e3ed      	LDI  R30,LOW(61)
0001da 93ea      	ST   -Y,R30
0001db de98      	RCALL _Set_Reg
0001dc 81e8      	LD   R30,Y
0001dd 30e0      	CPI  R30,0
0001de f461      	BRNE _0x43
0001df e4ee      	LDI  R30,LOW(78)
0001e0 2e5e      	MOV  R5,R30
0001e1 e2e0      	LDI  R30,LOW(32)
0001e2 93ea      	ST   -Y,R30
0001e3 de90      	RCALL _Set_Reg
0001e4 e6e4      	LDI  R30,LOW(100)
0001e5 e0f0      	LDI  R31,HIGH(100)
0001e6 940e 02ff 	CALL SUBOPT_0x6
0001e8 9468      	SET
0001e9 f820      	BLD  R2,0
0001ea c00a      	RJMP _0x44
                 _0x43:
0001eb e3ef      	LDI  R30,LOW(63)
0001ec 2e5e      	MOV  R5,R30
0001ed e2e0      	LDI  R30,LOW(32)
0001ee 93ea      	ST   -Y,R30
0001ef de84      	RCALL _Set_Reg
0001f0 e0e5      	LDI  R30,LOW(5)
0001f1 e0f0      	LDI  R31,HIGH(5)
0001f2 940e 02ff 	CALL SUBOPT_0x6
0001f4 9ac3      	SBI  0x18,3
                 _0x44:
0001f5 940c 02d3 	JMP  _0x2080001
                 ;
                 ;void send_temp_comand(void);
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0038 {
                 _usart_rx_isr:
0001f7 940e 02d9 	CALL SUBOPT_0x1
                 ; 0000 0039 char status,data;
                 ; 0000 003A status=UCSRA;
0001f9 931a      	ST   -Y,R17
0001fa 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0001fb b11b      	IN   R17,11
                 ; 0000 003B data=UDR;
0001fc b10c      	IN   R16,12
                 ; 0000 003C if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0001fd 2fe1      	MOV  R30,R17
0001fe 71ec      	ANDI R30,LOW(0x1C)
0001ff f5a9      	BRNE _0x47
                 ; 0000 003D    {
                 ; 0000 003E    rx_buffer[rx_wr_index++]=data;
000200 2de9      	MOV  R30,R9
000201 9493      	INC  R9
000202 e0f0      	LDI  R31,0
000203 57ea      	SUBI R30,LOW(-_rx_buffer)
000204 4ffd      	SBCI R31,HIGH(-_rx_buffer)
000205 8300      	ST   Z,R16
                 ; 0000 003F    //putchar(data);
                 ; 0000 0040    if (data=='*') rx_wr_index=0;
000206 320a      	CPI  R16,42
000207 f409      	BRNE _0x48
000208 2499      	CLR  R9
                 ; 0000 0041    if (data=='/'){
                 _0x48:
000209 320f      	CPI  R16,47
00020a f4f9      	BRNE _0x49
                 ; 0000 0042      if ((rx_buffer[0]=='r') & (rx_buffer[1]=='t') & (rx_buffer[2]=='a')) {
00020b 91a0 0286 	LDS  R26,_rx_buffer
00020d e7e2      	LDI  R30,LOW(114)
00020e 940e 031b 	CALL __EQB12
000210 2e0e      	MOV  R0,R30
                +
000211 91a0 0287+LDS R26 , _rx_buffer + ( 1 )
                 	__GETB2MN _rx_buffer,1
000213 e7e4      	LDI  R30,LOW(116)
000214 940e 031b 	CALL __EQB12
000216 220e      	AND  R0,R30
                +
000217 91a0 0288+LDS R26 , _rx_buffer + ( 2 )
                 	__GETB2MN _rx_buffer,2
000219 e6e1      	LDI  R30,LOW(97)
00021a 940e 031b 	CALL __EQB12
00021c 21e0      	AND  R30,R0
00021d f061      	BREQ _0x4A
                 ; 0000 0043      puts(rx_buffer);
00021e e8e6      	LDI  R30,LOW(_rx_buffer)
00021f e0f2      	LDI  R31,HIGH(_rx_buffer)
000220 93fa      	ST   -Y,R31
000221 93ea      	ST   -Y,R30
000222 940e 02bc 	CALL _puts
                 ; 0000 0044      PORTA.0=~PORTA.0;
000224 9bd8      	SBIS 0x1B,0
000225 c002      	RJMP _0x4B
000226 98d8      	CBI  0x1B,0
000227 c001      	RJMP _0x4C
                 _0x4B:
000228 9ad8      	SBI  0x1B,0
                 _0x4C:
                 ; 0000 0045      send_temp_comand();
000229 d07b      	RCALL _send_temp_comand
                 ; 0000 0046 
                 ; 0000 0047 
                 ; 0000 0048 
                 ; 0000 0049 
                 ; 0000 004A        }
                 ; 0000 004B        }
                 _0x4A:
                 ; 0000 004C #if RX_BUFFER_SIZE == 256
                 ; 0000 004D    // special case for receiver buffer size=256
                 ; 0000 004E    if (++rx_counter == 0)
                 ; 0000 004F       {
                 ; 0000 0050 #else
                 ; 0000 0051    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
                 _0x49:
00022a e0e8      	LDI  R30,LOW(8)
00022b 15e9      	CP   R30,R9
00022c f409      	BRNE _0x4D
00022d 2499      	CLR  R9
                 ; 0000 0052    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4D:
00022e 94b3      	INC  R11
00022f e0e8      	LDI  R30,LOW(8)
000230 15eb      	CP   R30,R11
000231 f419      	BRNE _0x4E
                 ; 0000 0053       {
                 ; 0000 0054       rx_counter=0;
000232 24bb      	CLR  R11
                 ; 0000 0055 #endif
                 ; 0000 0056       rx_buffer_overflow=1;
000233 9468      	SET
000234 f821      	BLD  R2,1
                 ; 0000 0057       }
                 ; 0000 0058    }
                 _0x4E:
                 ; 0000 0059 }
                 _0x47:
000235 9109      	LD   R16,Y+
000236 9119      	LD   R17,Y+
                 _0x65:
000237 91e9      	LD   R30,Y+
000238 bfef      	OUT  SREG,R30
000239 91f9      	LD   R31,Y+
00023a 91e9      	LD   R30,Y+
00023b 91b9      	LD   R27,Y+
00023c 91a9      	LD   R26,Y+
00023d 9199      	LD   R25,Y+
00023e 9189      	LD   R24,Y+
00023f 9179      	LD   R23,Y+
000240 9169      	LD   R22,Y+
000241 90f9      	LD   R15,Y+
000242 9019      	LD   R1,Y+
000243 9009      	LD   R0,Y+
000244 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0060 {
                 ; 0000 0061 char data;
                 ; 0000 0062 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0063 data=rx_buffer[rx_rd_index++];
                 ; 0000 0064 #if RX_BUFFER_SIZE != 256
                 ; 0000 0065 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0066 #endif
                 ; 0000 0067 #asm("cli")
                 ; 0000 0068 --rx_counter;
                 ; 0000 0069 #asm("sei")
                 ; 0000 006A return data;
                 ; 0000 006B }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;#include <stdio.h>
                 ;
                 ;unsigned int j;
                 ;void sd(void);
                 ;
                 ;void main(void)
                 ; 0000 0075 {
                 _main:
                 ; 0000 0076 
                 ; 0000 0077 PORTA=0x00;
000245 e0e0      	LDI  R30,LOW(0)
000246 bbeb      	OUT  0x1B,R30
                 ; 0000 0078 DDRA=0x07;
000247 e0e7      	LDI  R30,LOW(7)
000248 bbea      	OUT  0x1A,R30
                 ; 0000 0079 
                 ; 0000 007A 
                 ; 0000 007B PORTB=0x00;
000249 e0e0      	LDI  R30,LOW(0)
00024a bbe8      	OUT  0x18,R30
                 ; 0000 007C DDRB=0x00;
00024b bbe7      	OUT  0x17,R30
                 ; 0000 007D 
                 ; 0000 007E PORTC=0x00;
00024c bbe5      	OUT  0x15,R30
                 ; 0000 007F DDRC=0x00;
00024d bbe4      	OUT  0x14,R30
                 ; 0000 0080 
                 ; 0000 0081 
                 ; 0000 0082 PORTD=0x00;
00024e bbe2      	OUT  0x12,R30
                 ; 0000 0083 DDRD=0x00;
00024f bbe1      	OUT  0x11,R30
                 ; 0000 0084 
                 ; 0000 0085 
                 ; 0000 0086 TCCR0=0x00;
000250 bfe3      	OUT  0x33,R30
                 ; 0000 0087 TCNT0=0x00;
000251 bfe2      	OUT  0x32,R30
                 ; 0000 0088 OCR0=0x00;
000252 bfec      	OUT  0x3C,R30
                 ; 0000 0089 
                 ; 0000 008A 
                 ; 0000 008B TCCR1A=0x00;
000253 bdef      	OUT  0x2F,R30
                 ; 0000 008C TCCR1B=0x00;
000254 bdee      	OUT  0x2E,R30
                 ; 0000 008D TCNT1H=0x00;
000255 bded      	OUT  0x2D,R30
                 ; 0000 008E TCNT1L=0x00;
000256 bdec      	OUT  0x2C,R30
                 ; 0000 008F ICR1H=0x00;
000257 bde7      	OUT  0x27,R30
                 ; 0000 0090 ICR1L=0x00;
000258 bde6      	OUT  0x26,R30
                 ; 0000 0091 OCR1AH=0x00;
000259 bdeb      	OUT  0x2B,R30
                 ; 0000 0092 OCR1AL=0x00;
00025a bdea      	OUT  0x2A,R30
                 ; 0000 0093 OCR1BH=0x00;
00025b bde9      	OUT  0x29,R30
                 ; 0000 0094 OCR1BL=0x00;
00025c bde8      	OUT  0x28,R30
                 ; 0000 0095 
                 ; 0000 0096 
                 ; 0000 0097 ASSR=0x00;
00025d bde2      	OUT  0x22,R30
                 ; 0000 0098 TCCR2=0x00;
00025e bde5      	OUT  0x25,R30
                 ; 0000 0099 TCNT2=0x00;
00025f bde4      	OUT  0x24,R30
                 ; 0000 009A OCR2=0x00;
000260 bde3      	OUT  0x23,R30
                 ; 0000 009B 
                 ; 0000 009C 
                 ; 0000 009D MCUCR=0x00;
000261 bfe5      	OUT  0x35,R30
                 ; 0000 009E MCUCSR=0x00;
000262 bfe4      	OUT  0x34,R30
                 ; 0000 009F 
                 ; 0000 00A0 
                 ; 0000 00A1 TIMSK=0x00;
000263 bfe9      	OUT  0x39,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // USART initialization
                 ; 0000 00A4 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00A5 // USART Receiver: On
                 ; 0000 00A6 // USART Transmitter: On
                 ; 0000 00A7 // USART Mode: Asynchronous
                 ; 0000 00A8 // USART Baud Rate: 19200
                 ; 0000 00A9 UCSRA=0x00;
000264 b9eb      	OUT  0xB,R30
                 ; 0000 00AA UCSRB=0x98;
000265 e9e8      	LDI  R30,LOW(152)
000266 b9ea      	OUT  0xA,R30
                 ; 0000 00AB UCSRC=0x06;
000267 e0e6      	LDI  R30,LOW(6)
000268 bde0      	OUT  0x20,R30
                 ; 0000 00AC UBRRH=0x00;
000269 e0e0      	LDI  R30,LOW(0)
00026a bde0      	OUT  0x20,R30
                 ; 0000 00AD UBRRL=0x2F;
00026b e2ef      	LDI  R30,LOW(47)
00026c b9e9      	OUT  0x9,R30
                 ; 0000 00AE 
                 ; 0000 00AF 
                 ; 0000 00B0 ACSR=0x80;
00026d e8e0      	LDI  R30,LOW(128)
00026e b9e8      	OUT  0x8,R30
                 ; 0000 00B1 SFIOR=0x00;
00026f e0e0      	LDI  R30,LOW(0)
000270 bfe0      	OUT  0x30,R30
                 ; 0000 00B2 
                 ; 0000 00B3 
                 ; 0000 00B4 ADCSRA=0x00;
000271 b9e6      	OUT  0x6,R30
                 ; 0000 00B5 
                 ; 0000 00B6 
                 ; 0000 00B7 SPCR=0x00;
000272 b9ed      	OUT  0xD,R30
                 ; 0000 00B8 
                 ; 0000 00B9 
                 ; 0000 00BA TWCR=0x00;
000273 bfe6      	OUT  0x36,R30
                 ; 0000 00BB 
                 ; 0000 00BC 
                 ; 0000 00BD #asm("sei")
000274 9478      	sei
                 ; 0000 00BE 
                 ; 0000 00BF //nRF_Config(1);
                 ; 0000 00C0 
                 ; 0000 00C1 j=0;
000275 24cc      	CLR  R12
000276 24dd      	CLR  R13
                 ; 0000 00C2  nRF_Config(1);
000277 e0e1      	LDI  R30,LOW(1)
000278 93ea      	ST   -Y,R30
000279 df22      	RCALL _nRF_Config
                 ; 0000 00C3  DDRA.0=1;
00027a 9ad0      	SBI  0x1A,0
                 ; 0000 00C4  DDRA.2=1;
00027b 9ad2      	SBI  0x1A,2
                 ; 0000 00C5  PORTA.0=1;
00027c 9ad8      	SBI  0x1B,0
                 ; 0000 00C6 while (1)
                 _0x59:
                 ; 0000 00C7       {
                 ; 0000 00C8 
                 ; 0000 00C9       if(State == 1)
00027d e0e1      	LDI  R30,LOW(1)
00027e 15e7      	CP   R30,R7
00027f f439      	BRNE _0x5C
                 ; 0000 00CA         {
                 ; 0000 00CB        // for (j=0;j<payload[0];j++)
                 ; 0000 00CC         //data1[j]=payload[j+1];
                 ; 0000 00CD        // putchar(payload[1]);
                 ; 0000 00CE          State = 0;
000280 2477      	CLR  R7
                 ; 0000 00CF           sd();
000281 d007      	RCALL _sd
                 ; 0000 00D0 
                 ; 0000 00D1 
                 ; 0000 00D2 
                 ; 0000 00D3      // puts(data1);
                 ; 0000 00D4      // PORTA.0=~PORTA.0;
                 ; 0000 00D5       PORTA.1=~PORTA.1;
000282 9bd9      	SBIS 0x1B,1
000283 c002      	RJMP _0x5D
000284 98d9      	CBI  0x1B,1
000285 c001      	RJMP _0x5E
                 _0x5D:
000286 9ad9      	SBI  0x1B,1
                 _0x5E:
                 ; 0000 00D6      // PORTA.2=~PORTA.2;
                 ; 0000 00D7       //delay_ms(1000);
                 ; 0000 00D8 
                 ; 0000 00D9 
                 ; 0000 00DA 
                 ; 0000 00DB         }
                 ; 0000 00DC         }
                 _0x5C:
000287 cff5      	RJMP _0x59
                 ; 0000 00DD 
                 ; 0000 00DE }
                 _0x5F:
000288 cfff      	RJMP _0x5F
                 ;
                 ;void sd(void){
                 ; 0000 00E0 void sd(void){
                 _sd:
                 ; 0000 00E1 unsigned int i;
                 ; 0000 00E2 for(i=0;i<payload[0];i++)
000289 931a      	ST   -Y,R17
00028a 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
00028b e000     +LDI R16 , LOW ( 0 )
00028c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x61:
00028d 91e0 0265 	LDS  R30,_payload
00028f 940e 02f4 	CALL SUBOPT_0x4
000291 f448      	BRSH _0x62
                 ; 0000 00E3   putchar(payload[i+1]);
000292 01f8      	MOVW R30,R16
                +
000293 59ea     +SUBI R30 , LOW ( - _payload - ( 1 ) )
000294 4ffd     +SBCI R31 , HIGH ( - _payload - ( 1 ) )
                 	__ADDW1MN _payload,1
000295 81e0      	LD   R30,Z
000296 93ea      	ST   -Y,R30
000297 d01f      	RCALL _putchar
                +
000298 5f0f     +SUBI R16 , LOW ( - 1 )
000299 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00029a cff2      	RJMP _0x61
                 _0x62:
                 ; 0000 00E4 PORTA.2=~PORTA.2;
00029b 9bda      	SBIS 0x1B,2
00029c c002      	RJMP _0x63
00029d 98da      	CBI  0x1B,2
00029e c001      	RJMP _0x64
                 _0x63:
00029f 9ada      	SBI  0x1B,2
                 _0x64:
                 ; 0000 00E5   j=0;
0002a0 24cc      	CLR  R12
0002a1 24dd      	CLR  R13
                 ; 0000 00E6   }
0002a2 9109      	LD   R16,Y+
0002a3 9119      	LD   R17,Y+
0002a4 9508      	RET
                 ;
                 ;void send_temp_comand(void){
                 ; 0000 00E8 void send_temp_comand(void){
                 _send_temp_comand:
                 ; 0000 00E9  nRF_Config(0);
0002a5 e0e0      	LDI  R30,LOW(0)
0002a6 940e 0309 	CALL SUBOPT_0x8
                 ; 0000 00EA  delay_ms(1000);
                 ; 0000 00EB Send_Data(3,&rx_buffer[0]);
0002a8 e0e3      	LDI  R30,LOW(3)
0002a9 93ea      	ST   -Y,R30
0002aa e8e6      	LDI  R30,LOW(_rx_buffer)
0002ab e0f2      	LDI  R31,HIGH(_rx_buffer)
0002ac 93fa      	ST   -Y,R31
0002ad 93ea      	ST   -Y,R30
0002ae de8e      	RCALL _Send_Data
                 ; 0000 00EC delay_ms(100);
0002af e6e4      	LDI  R30,LOW(100)
0002b0 e0f0      	LDI  R31,HIGH(100)
0002b1 940e 02ff 	CALL SUBOPT_0x6
                 ; 0000 00ED nRF_Config(1);
0002b3 e0e1      	LDI  R30,LOW(1)
0002b4 940e 0309 	CALL SUBOPT_0x8
                 ; 0000 00EE delay_ms(1000);
                 ; 0000 00EF }
0002b6 9508      	RET
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 putchar0:
0002b7 9b5d           sbis usr,udre
0002b8 cffe           rjmp putchar0
0002b9 81e8           ld   r30,y
0002ba b9ec           out  udr,r30
0002bb c017      	RJMP _0x2080001
                 _puts:
0002bc 931a      	ST   -Y,R17
                 _0x2000003:
0002bd 81a9      	LDD  R26,Y+1
0002be 81ba      	LDD  R27,Y+1+1
0002bf 91ed      	LD   R30,X+
0002c0 83a9      	STD  Y+1,R26
0002c1 83ba      	STD  Y+1+1,R27
0002c2 2f1e      	MOV  R17,R30
0002c3 30e0      	CPI  R30,0
0002c4 f019      	BREQ _0x2000005
0002c5 931a      	ST   -Y,R17
0002c6 dff0      	RCALL _putchar
0002c7 cff5      	RJMP _0x2000003
                 _0x2000005:
0002c8 e0ea      	LDI  R30,LOW(10)
0002c9 93ea      	ST   -Y,R30
0002ca dfec      	RCALL _putchar
0002cb 8118      	LDD  R17,Y+0
                 _0x2080002:
0002cc 9623      	ADIW R28,3
0002cd 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
0002ce 81e8      	LD   R30,Y
0002cf b9ef      	OUT  0xF,R30
                 _0x2020003:
0002d0 9b77      	SBIS 0xE,7
0002d1 cffe      	RJMP _0x2020003
0002d2 b1ef      	IN   R30,0xF
                 _0x2080001:
0002d3 9621      	ADIW R28,1
0002d4 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _Temp_Addrs:
000260           	.BYTE 0x5
                 _payload:
000265           	.BYTE 0x21
                 _rx_buffer:
000286           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0002d5 efef      	LDI  R30,LOW(255)
0002d6 93ea      	ST   -Y,R30
0002d7 940c 02ce 	JMP  _spi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
0002d9 920a      	ST   -Y,R0
0002da 921a      	ST   -Y,R1
0002db 92fa      	ST   -Y,R15
0002dc 936a      	ST   -Y,R22
0002dd 937a      	ST   -Y,R23
0002de 938a      	ST   -Y,R24
0002df 939a      	ST   -Y,R25
0002e0 93aa      	ST   -Y,R26
0002e1 93ba      	ST   -Y,R27
0002e2 93ea      	ST   -Y,R30
0002e3 93fa      	ST   -Y,R31
0002e4 b7ef      	IN   R30,SREG
0002e5 93ea      	ST   -Y,R30
0002e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0002e7 e6e0      	LDI  R30,LOW(96)
0002e8 93ea      	ST   -Y,R30
0002e9 940e 0074 	CALL _Set_Reg
0002eb e2e0      	LDI  R30,LOW(32)
0002ec 15e5      	CP   R30,R5
0002ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002ee 9250 0265 	STS  _payload,R5
0002f0 e6e1      	LDI  R30,LOW(97)
0002f1 93ea      	ST   -Y,R30
0002f2 940c 0074 	JMP  _Set_Reg
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002f4 01d8      	MOVW R26,R16
0002f5 e0f0      	LDI  R31,0
0002f6 17ae      	CP   R26,R30
0002f7 07bf      	CPC  R27,R31
0002f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002f9 e0ea      	LDI  R30,LOW(10)
0002fa e0f0      	LDI  R31,HIGH(10)
0002fb 93fa      	ST   -Y,R31
0002fc 93ea      	ST   -Y,R30
0002fd 940c 030f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0002ff 93fa      	ST   -Y,R31
000300 93ea      	ST   -Y,R30
000301 940c 030f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000303 93ea      	ST   -Y,R30
000304 940e 0074 	CALL _Set_Reg
000306 e0e1      	LDI  R30,LOW(1)
000307 2e5e      	MOV  R5,R30
000308 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000309 93ea      	ST   -Y,R30
00030a 940e 019c 	CALL _nRF_Config
00030c eee8      	LDI  R30,LOW(1000)
00030d e0f3      	LDI  R31,HIGH(1000)
00030e cff0      	RJMP SUBOPT_0x6
                 
                 
                 	.CSEG
                 _delay_ms:
00030f 91e9      	ld   r30,y+
000310 91f9      	ld   r31,y+
000311 9630      	adiw r30,0
000312 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000313 e686     +LDI R24 , LOW ( 0xE66 )
000314 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000315 9701     +SBIW R24 , 1
000316 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
000317 95a8      	wdr
000318 9731      	sbiw r30,1
000319 f7c9      	brne __delay_ms0
                 __delay_ms1:
00031a 9508      	ret
                 
                 __EQB12:
00031b 17ea      	CP   R30,R26
00031c e0e1      	LDI  R30,1
00031d f009      	BREQ __EQB12T
00031e 27ee      	CLR  R30
                 __EQB12T:
00031f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  15 r1 :   3 r2 :   5 r3 :   0 r4 :   2 r5 :  15 r6 :   2 r7 :   9 
r8 :   0 r9 :   5 r10:   0 r11:   3 r12:   2 r13:   2 r14:   0 r15:   2 
r16:  35 r17:  32 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  15 r25:   5 r26:  36 r27:  13 r28:   4 r29:   1 r30: 287 r31:  42 
x  :   9 y  : 104 z  :  15 
Registers used: 27 out of 35 (77.1%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   4 and   :   2 andi  :  10 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  13 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   2 brne  :  26 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  34 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  11 cpc   :   4 cpi   :  14 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  28 ld    :  25 ldd   :  21 ldi   : 126 
lds   :  11 lpm   :  19 lsl   :   0 lsr   :   0 mov   :  23 movw  :  12 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   1 out   :  56 pop   :   4 push  :   4 rcall :  24 ret   :  11 
reti  :   1 rjmp  :  39 rol   :   0 ror   :   0 sbc   :   0 sbci  :  12 
sbi   :  12 sbic  :   0 sbis  :   6 sbiw  :   6 sbr   :   0 sbrc  :   1 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  67 std   :   2 sts   :   2 sub   :   0 subi  :  12 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000640   1546     54   1600   32768   4.9%
[.dseg] 0x000060 0x00028e      0     46     46    2143   2.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
